{"version":3,"sources":["Components/UserFeedback/Message/Message.module.css","Services/PersonService/personService.js","Components/Filter/Filter.js","Components/Persons/PersonForm/PersonForm.js","Components/Persons/Person/Person.js","Components/Persons/Persons.js","Components/UserFeedback/Message/Message.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","baseUrl","axios","get","then","response","data","personData","post","personId","put","delete","Filter","props","type","onChange","onFilterInputChanged","PersonForm","onSubmit","onNewPersonAdded","value","name","nameInputChanged","number","numberInputChanged","Person","onClick","personDeleted","Persons","onPersonDeleteHandler","id","deletedPersonId","personsContent","filteredContent","personList","filter","person","filterName","map","key","Success","componentClasses","classes","Message","SuccessMessage","error","ErrorMessage","className","join","children","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","showName","setShowName","message","setMessage","useEffect","personService","addNewPhoneNumberHandler","event","preventDefault","copiedPhoneBook","duppArr","length","window","confirm","newPersonData","_id","newData","createMessage","catch","newPerson","newlyCreatedPerson","newlyCreatedPersonFormatted","concat","isError","setTimeout","target","personName","copiedPersonArr","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0d4abbd1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Message\":\"Message_Message__1OGkR\",\"SuccessMessage\":\"Message_SuccessMessage__1ktnN\",\"ErrorMessage\":\"Message_ErrorMessage__LGdra\"};","import axios from 'axios';\r\n\r\nconst baseUrl = \"/api/persons\";\r\n\r\nconst getAllPersons = () => {\r\n    const request = axios.get(baseUrl);\r\n    return request.then(response => {\r\n        //console.log(response);\r\n        return response.data.data;\r\n    });\r\n}\r\n\r\nconst createPerson = (personData) => {\r\n    const request = axios.post(baseUrl, personData);\r\n    return request.then(response => {\r\n        // console.log(response);\r\n        return response.data.data;\r\n    });\r\n}\r\n\r\nconst editPerson = (personId, personData) => {\r\n    const request = axios.put(baseUrl + `/${personId}`, personData);\r\n    return request.then(response => response.data.data);\r\n}\r\n\r\nconst deletePerson = (personId) => {\r\n    const request = axios.delete(baseUrl + `/${personId}`);\r\n    return request.then(response => response.data);\r\n}\r\n\r\nexport default { getAllPersons, createPerson, editPerson, deletePerson };","import React from 'react';\r\n\r\nconst Filter = (props) => {\r\n    return (\r\n        <div>\r\n            filter shown with: <input type=\"text\" onChange={props.onFilterInputChanged} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Filter;\r\n","import React from 'react';\r\n\r\nconst PersonForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.onNewPersonAdded}>\r\n            <div>\r\n                name: <input value={props.name} onChange={props.nameInputChanged} />\r\n            </div>\r\n            <div>\r\n                number: <input value={props.number} onChange={props.numberInputChanged} />\r\n            </div>\r\n            <div>\r\n            <button type=\"submit\">add</button>\r\n            </div>\r\n      </form>\r\n    )\r\n}\r\n\r\nexport default PersonForm;\r\n","import React from 'react';\r\n\r\nconst Person = (props) => {\r\n    return (\r\n        <div>{props.name}: {props.number} <button onClick={props.personDeleted}>delete</button> </div>\r\n    )\r\n}\r\n\r\nexport default Person;\r\n","import React from 'react';\r\n\r\nimport Person from './Person/Person';\r\n\r\nconst Persons = (props) => {\r\n\r\n    const onPersonDeleteHandler = (id) => {\r\n        // Pass this data to the parent object\r\n        // I want to handle all HTTP requests in the same place (App.js in this case)\r\n        props.deletedPersonId(id);\r\n    }\r\n\r\n\r\n    let personsContent = null;\r\n    let filteredContent = props.personList.filter(person => person.name === props.filterName)[0];\r\n\r\n    if (filteredContent) {\r\n        personsContent = <Person name={filteredContent.name} number={filteredContent.number} personDeleted={() => onPersonDeleteHandler(filteredContent.id)} />;\r\n    }\r\n    else {\r\n        personsContent = props.personList.map(person => {\r\n            return <Person key={person.id} name={person.name} number={person.number} personDeleted={() => onPersonDeleteHandler(person.id)} />;\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {personsContent}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Persons;\r\n","import React from 'react';\r\n\r\nimport classes from './Message.module.css';\r\n\r\nconst Success = (props) => {\r\n    let componentClasses = [classes.Message, classes.SuccessMessage];\r\n\r\n    if(props.error) {\r\n        componentClasses = [classes.Message, classes.ErrorMessage];\r\n    }\r\n\r\n    return (\r\n        <div className={componentClasses.join(' ')}>{props.children}</div>\r\n    )\r\n}\r\n\r\nexport default Success;\r\n","import React, { useState, useEffect } from 'react';\nimport personService from './Services/PersonService/personService';\n\nimport './App.css';\n\nimport Filter from './Components/Filter/Filter';\nimport PersonForm from './Components/Persons/PersonForm/PersonForm';\nimport Persons from './Components/Persons/Persons';\nimport Message from './Components/UserFeedback/Message/Message';\n\nconst App = () => {\n  const [ persons, setPersons] = useState([]);\n  const [ newName, setNewName ] = useState('');\n  const [ newNumber, setNewNumber ] = useState('');\n  const [ showName, setShowName ] = useState('');\n  const [ message, setMessage ] = useState(null); \n\n  useEffect(() => {\n    personService.getAllPersons().then(persons => {\n      setPersons(persons);\n    })\n  }, []);\n\n  const nameInputChangeHandler = (event) => {\n    setNewName(event.target.value);\n  }\n\n  const numberInputChangeHandler = (event) => {\n    setNewNumber(event.target.value);\n  }\n\n  const onFilterChangeHandler = (event) => {\n    setShowName(event.target.value);\n  }\n\n  const addNewPhoneNumberHandler = (event) => {\n    event.preventDefault();\n\n    let copiedPhoneBook = [...persons];\n\n    // Check if we should edit, instead of adding a new contact\n    let duppArr = copiedPhoneBook.filter(person => person.name === newName);\n    if (duppArr.length > 0) {\n      if(window.confirm(`${newName} is already added to the phonebook, replace the old number with a new one?`)){\n        // Replace the number\n        const personData = duppArr[0];\n        const newPersonData = { _id: personData.id, name: personData.name, number: newNumber };\n        \n        personService.editPerson(personData.id, newPersonData).then(newData => {\n          const data = {...newData};\n          delete data['_id'];\n          data['id'] = personData.id;\n\n          setPersons(persons.map(person => person.id !== personData.id ? person : data));\n          createMessage(false, `Information of ${personData.name} has been successfully updated`);\n          setNewName(\"\");\n          setNewNumber(\"\");\n        }).catch(error => {\n          createMessage(true, `Information of ${personData.name} has already been removed from server`);\n        });\n      }\n      return;\n    }\n\n    const newPerson = { name: newName, number: newNumber };\n\n    // Backend connection\n    personService.createPerson(newPerson).then(newlyCreatedPerson => {\n      // Add the new person to the copied phonebook\n      \n      const newlyCreatedPersonFormatted = {\n        id: newlyCreatedPerson._id,\n        name: newlyCreatedPerson.name,\n        number: newlyCreatedPerson.number\n      };\n\n      copiedPhoneBook = copiedPhoneBook.concat(newlyCreatedPersonFormatted);\n\n      // Update the state\n      setPersons(copiedPhoneBook);\n      createMessage(false, `Successfully added ${newPerson.name}`);\n      setNewName(\"\");\n      setNewNumber(\"\");\n    }).catch(error => {\n      createMessage(true, error.response.data.message);\n    });\n  }\n\n  const createMessage = (isError, message) => {\n\n    setMessage({\n      isError: isError, message: message\n    });\n\n    setTimeout(() => {\n      setMessage(null);\n    }, 3000);\n\n  }\n\n  const onDeletePersonHandler = (id) => {\n    const personName = persons.filter(person => person.id === id)[0].name;\n\n    if (window.confirm(`You really want to delete ${personName}?`)){\n      personService.deletePerson(id).then(() => {\n        let copiedPersonArr = [...persons];\n        copiedPersonArr = copiedPersonArr.filter(person => person.id !== id);\n        setPersons(copiedPersonArr);\n        createMessage(false, `Information of ${personName} has been successfully deleted`);\n      }).catch(error => {\n        createMessage(true, `Failed to remove ${personName}`);\n      });\n    }\n    else {\n      return;\n    }\n    \n  }\n\n  return (\n    <div className=\"App\">\n      <h2>Phonebook</h2>\n\n      {message ? <Message error={ message.isError }>{ message.message }</Message> : null}\n      \n      <Filter onFilterInputChanged={onFilterChangeHandler} />\n\n      <h3>add a new</h3>\n\n      <PersonForm \n        name={newName} \n        number={newNumber} \n        nameInputChanged={nameInputChangeHandler}\n        numberInputChanged={numberInputChangeHandler}\n        onNewPersonAdded={(event) => addNewPhoneNumberHandler(event)} />\n\n      <h2>Numbers</h2>\n\n      <Persons personList={persons} filterName={showName} deletedPersonId={onDeletePersonHandler} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}